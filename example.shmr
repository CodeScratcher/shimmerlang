/* 
functions are variables 
everything is a function
function literals = (args){code}
*/ 
define(makePrinter, (txt){
  return (){print(args)}
})
/* if statements =
 if(condition, true)
 ifElse(condition, true, false) */
ifElse(true,
  (){print("correct")}, 
  (){print("uh oh")}
)
/* no operators, only functions */
define(x,5)
print(add(x, 3))
define(hello, makePrinter("Hello world!"))
hello()
/* no loops, only recursion */
define(recurse, (numTimes){
  ifElse(less(numTimes,1)
    (){print("done")}
    (){
      print(numTimes)
      recurse(subtract(numTimes, 1))
    }
  )
})
recurse(15)
recurse(5)
define(array,[1, 2, 3, 4, 5, 6, 7, 8, 9])
define(forInBackend, (array, callback, start){
  ifElse(greater(start, len(array)),
  (){
    return(0)
  },
  (){
    callback(array, at(array, start))
    forInBackend(array, callback, add(start, 1))
  })
})
define(forIn, (array, callback){
  forInBackend(array, callback, 0)
})
export(forIn)
forIn([1,5,3,2,3], (arr, i){
  print(i)
  printWEnd(i,"")
})
/* =>
1
15
53
32
23
*/
define(object,<identifier:"value">)
define(DogConstructor, (age, breed){
  return(<
    age:$(age),
    breed:$(breed)
  >)
})
define(AwardDogConstructor, (age,breed,awards){
  define(base, DogConstructor($(age),$(breed)))
  objectSet(base, awards, $(awards))
  return(base)
})
define(Harper, DogConstructor(11, "Lab Mix"))
define(Stanley, DogConstructor(2, "Standard Poodle"))
define(SomeAwardDog, AwardDogConstructor(4, "Lab", ["Best Lab", "Most Obedient Dog"]))
define(iCanHazObjectArrays, [$(Harper), $(Stanley), $(SomeAwardDog)])