; functions are variables 
; everything is a function
; function literals = (args) {code}

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; This file should print:    ;;
;;                            ;;
;; correct                    ;;
;; 8                          ;;
;; Hello world!               ;;
;; 54321done                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

def(
  $make_printer,
  (txt) {
    () {print(txt)}
  }
)

; if statements = ternary operators
;   if(cond, true)
;   if_else(cond, true, false)

if_else(
  true,
  () {
    print("correct\n")
  }, 
  (){
    print("uh oh\n")
  }
)()

; no operators, only functions

def($x, 5)
print(add(x, 3), "\n") ; prints 8
def($hello, make_printer("Hello world!\n"))
hello() ; prints Hello world!

; no loops, only recursion
def(
  $recurse,
  (numTimes) {
    if_else(
      lt(numTimes, 1),
      () {
        print("done\n")
      },
      () {
        print(numTimes)
        recurse(sub(numTimes, 1))
      }
    )()
  }
)

recurse(5)

# Not implemented yet...
define(array, [1, 2, 3, 4, 5, 6, 7, 8, 9])

define(forInBackend, (array, callback, start){ ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; END OF REFACTORED CODE
  ifElse(greater(start, len(array)),
  (){
    return(0)
  },
  (){
    callback(array, at(array, start))
    forInBackend(array, callback, add(start, 1))
  })
})
define(forIn, (array, callback){
  forInBackend(array, callback, 0)
})
export(forIn)
forIn([1,5,3,2,3], (arr, i){
  print(i)
  printWEnd(i,"")
})
/* =>
1
15
53
32
23
*/
define(object,<identifier:"value">)
define(DogConstructor, (age, breed){
  return(<
    age:$(age),
    breed:$(breed)
  >)
})
define(AwardDogConstructor, (age,breed,awards){
  define(base, DogConstructor($(age),$(breed)))
  objectSet(base, awards, $(awards))
  return(base)
})

define(Harper, DogConstructor(11, "Lab Mix"))
define(Stanley, DogConstructor(2, "Standard Poodle"))
define(SomeAwardDog, AwardDogConstructor(4, "Lab", ["Best Lab", "Most Obedient Dog"]))
define(iCanHazObjectArrays, [$(Harper), $(Stanley), $(SomeAwardDog)])
#
